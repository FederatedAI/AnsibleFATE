- name: "mkdir({{deploy_mode}}): common base dir"
  file:
    path: "{{item}}"
    state: "directory"
    owner: "{{ansible_ssh_user}}"
  with_items:
  - "{{cbase}}"
  - "{{tbase}}/{{pname}}"

- set_fact: supervisord_path="{{cbase}}/miniconda3/bin"

- debug: var=supervisord_path

- name: "check({{deploy_mode}}): supervisord conf file"
  stat: path="{{supervisord_path}}/supervisord"
  register: supervisord_self_reg

- name: "check({{deploy_mode}}): miniconda conf file"
  stat: path="{{supervisord_path}}/pip"
  register: miniconda_self_reg

- name: "check({{deploy_mode}}): miniconda3 package"
  stat: path="{{tbase}}/{{pname}}/Miniconda3-{{python['version']}}-Linux-x86_64.sh"
  register: miniconda_package_reg

- name: "copy({{deploy_mode}}): Miniconda3-{{python['version']}}-Linux-x86_64.sh"
  copy:
    src: "Miniconda3-{{python['version']}}-Linux-x86_64.sh"
    dest: "{{tbase}}/{{pname}}/Miniconda3-{{python['version']}}-Linux-x86_64.sh"
  when: miniconda_self_reg.stat.exists == False and miniconda_package_reg.stat.exists == False

- name: "commit({{deploy_mode}}): Miniconda3-{{python['version']}}-Linux-x86_64.sh"
  shell: "/bin/bash ./Miniconda3-{{python['version']}}-Linux-x86_64.sh -b -f -p {{cbase}}/{{python['dest']}}"
  args:
    chdir: "{{tbase}}/{{pname}}"
  when: miniconda_self_reg.stat.exists == False

- name: "copy({{deploy_mode}}): supervisor-4.2.4-py2.py3-none-any.whl"
  copy:
    src: "supervisor-4.2.4-py2.py3-none-any.whl"
    dest: "{{tbase}}/{{pname}}"
  when: supervisord_self_reg.stat.exists == False

- name: "check({{deploy_mode}}): pymysql"
  shell: "{{cbase}}/miniconda3/bin/pip list |grep -wq PyMySQL && echo 0 || echo 1"
  register: pymysql_reg

- name: "copy({{deploy_mode}}): PyMySQL-1.0.2-py3-none-any.whl"
  copy:
    src: "PyMySQL-1.0.2-py3-none-any.whl"
    dest: "{{tbase}}/{{pname}}"
  when: pymysql_reg['stdout'] == "1"

- name: "pip({{deploy_mode}}): install pymysql"
  pip:
    extra_args: "-f {{tbase}}/{{pname}} --no-index"
    executable: "{{supervisord_path}}/pip"
    name: "PyMySQL"
  when: pymysql_reg['stdout'] == "1"

- name: "pip({{deploy_mode}}): install supervisor"
  pip:
    extra_args: "-f {{tbase}}/{{pname}} --no-index"
    executable: "{{supervisord_path}}/pip"
    name: "supervisor"
  when: supervisord_self_reg.stat.exists == False

- name: "check({{deploy_mode}}): supervisord conf file"
  stat: path="{{cbase}}/supervisord"
  register: supervisord_conf_reg

- name: "untar({{deploy_mode}}): supervisord-conf-{{supervisord.get('version','1.1.4')}}.tar.gz"
  unarchive:
    src: "supervisord-conf-{{supervisord.get('version','1.1.4')}}.tar.gz"
    dest: "{{cbase}}/"
  when: supervisord_conf_reg.stat.exists == False

- name: "new({{deploy_mode}}): supervisord/supervisord.conf"
  template:
    src: supervisord.conf.jinja
    dest: "{{cbase}}/supervisord/supervisord.conf"
  vars:
    account: "{{supervisord['account']}}"
    service: "{{supervisord['service']}}"
  notify:
  - stop supervisor

- name: "flush_handlers"
  meta: flush_handlers

- name: "new({{deploy_mode}}): service.sh"
  template:
    src: service.sh.jinja
    dest: "{{cbase}}/supervisord/service.sh"
    mode: 0755
  vars:
    account: "{{supervisord['account']}}"
    service: "{{supervisord['service']}}"

- name: "new({{deploy_mode}}): boot.sh"
  template:
    src: boot.sh.jinja
    dest: "{{cbase}}/supervisord/boot.sh"
    mode: 0755

- name: "new({{deploy_mode}}): check.sh"
  template:
    src: check.sh.jinja
    dest: "{{cbase}}/supervisord/check.sh"

- name: "mkdir({{deploy_mode}}): project common dir"
  file:
    path: "{{cbase}}/supervisord/{{item}}"
    state: "directory"
  with_items:
    - logs
    - run
    - supervisord.d

- name: "mkdir({{deploy_mode}}): {{lbase}}/supervisord"
  file:
    path: "{{lbase}}/supervisord"
    state: "directory"

- name: "start({{deploy_mode}}): supervisord service"
  command: "/bin/bash {{cbase}}/supervisord/check.sh > {{lbase}}/supervisord/check.log"

- name: "crond({{deploy_mode}}): supervisord process"
  cron:
    name: "check_supervisord_process"
    minute: "*/5"
    job: "/bin/bash {{cbase}}/supervisord/check.sh > {{lbase}}/supervisord/check.log"

- name: "wait({{deploy_mode}})): open port {{supervisord['service']['port']}}"
  wait_for:
    host: "{{supervisord['service']['ip']}}"
    port: "{{supervisord['service']['port']}}"
    delay: 0
    state: started
    timeout: 120
  register: waitfor_supervisor

- name: "check({{deploy_mode}})): supervisor service"
  debug: msg="******start {{role_name}} successfully******"
  when: waitfor_supervisor.get('state') == 'started'
