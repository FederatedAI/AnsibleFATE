---
- name: "mkdir({{deploy_mode}}): {{tbase}}/{{pname}}"
  shell: "rm -fr {{tbase}}/{{pname}}/pypi && mkdir -p {{tbase}}/{{pname}}/pypi"
  args:
    warn: False

- name: "copy({{deploy_mode}}): requirements.txt"
  copy:
    src: "{{item}}"
    dest: "{{tbase}}/{{pname}}/{{item}}"
  with_items:
  - "requirements.txt"

- name: "check({{deploy_mode}}): python"
  stat: path="{{cbase}}/{{python['dest']}}/bin/python"
  register: py_reg

- name: "check({{deploy_mode}}): miniconda3 package"
  stat: path="{{tbase}}/{{pname}}/Miniconda3-{{python['version']}}-Linux-x86_64.sh"
  register: mc_reg

- name: "copy({{deploy_mode}}): Miniconda3-{{python['version']}}-Linux-x86_64.sh"
  copy:
    src: "Miniconda3-{{python['version']}}-Linux-x86_64.sh"
    dest: "{{tbase}}/{{pname}}/Miniconda3-{{python['version']}}-Linux-x86_64.sh"
  when: py_reg.stat.exists == False and mc_reg.stat.exists == False

- name: "commit({{deploy_mode}}): Miniconda3-{{python['version']}}-Linux-x86_64.sh"
  shell: "/bin/bash ./Miniconda3-{{python['version']}}-Linux-x86_64.sh -b -f -p {{cbase}}/{{python['dest']}}"
  args:
    chdir: "{{tbase}}/{{pname}}"
  when: py_reg.stat.exists == False

- name: "untar({{deploy_mode}}): pypi.tar.gz"
  unarchive:
    src: "pypi.tar.gz"
    dest: "{{tbase}}/{{pname}}/pypi"
    extra_opts:
    - "--strip-components=1"

- name: "check({{deploy_mode}}): {{cbase}}/{{python['dest']}}/bin/virtualenv"
  stat: path="{{cbase}}/{{python['dest']}}/bin/virtualenv"
  register: virtualenv_reg

- name: "pip({{deploy_mode}}): install virtualenv"
  pip:
    extra_args: "-U -f {{tbase}}/{{pname}}/pypi --no-index"
    executable: "{{cbase}}/{{python['dest']}}/bin/pip"
    name: "virtualenv"
  when: virtualenv_reg.stat.exists == False

- name: "check({{deploy_mode}}): venv exists or not"
  stat: path="{{pbase}}/{{pname}}/{{python['venv']}}"
  register: venv_reg

- name: "build({{deploy_mode}}): python virtual env"
  shell: "{{cbase}}/{{python['dest']}}/bin/virtualenv -p {{cbase}}/{{python['dest']}}/bin/python3 --no-wheel --no-setuptools --no-download {{pbase}}/{{pname}}/{{python['venv']}}"
  when: venv_reg.stat.exists == False

- name: "check({{deploy_mode}}): venv again"
  stat: path="{{pbase}}/{{pname}}/{{python['venv']}}"
  register: venv2_reg

- name: "pip({{deploy_mode}}): venv install must packages"
  pip:
    name:
    - "pip"
    - "setuptools"
    - "wheel"
    extra_args: "-U -f {{tbase}}/{{pname}}/pypi --no-index"
    virtualenv: "{{pbase}}/{{pname}}/{{python['venv']}}"
  when: venv_reg.stat.exists == False and venv2_reg.stat.exists == True

- name: "pip({{deploy_mode}}): venv install packages"
  pip:
    extra_args: "-U -f {{tbase}}/{{pname}}/pypi --no-index"
    requirements: "{{tbase}}/{{pname}}/requirements.txt"
    virtualenv: "{{pbase}}/{{pname}}/{{python['venv']}}"
  when: venv_reg.stat.exists == False and venv2_reg.stat.exists == True

- name: "update({{deploy_mode}}): {{pbase}}/{{pname}}/tools/check_pip.sh"
  template: src=check_pip.sh.jinja dest={{pbase}}/{{pname}}/tools/check_pip.sh

- name: "check({{deploy_mode}}): the number of pip packages"
  shell: "/bin/bash {{pbase}}/{{pname}}/tools/check_pip.sh"
  register: pip_check

- name: "pip({{deploy_mode}}): venv reinstall packages"
  pip:
    extra_args: "-U -f {{tbase}}/{{pname}}/pypi --no-index"
    requirements: "{{tbase}}/{{pname}}/requirements.txt"
    virtualenv: "{{pbase}}/{{pname}}/{{python['venv']}}"
  when: pip_check.stdout.find("fate_pip_check_pass") != -1

- name: "spark miniconda install"
  include_tasks: spark_miniconda.yml
  when: default_engines == 'spark'
